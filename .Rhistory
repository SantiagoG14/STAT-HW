data <- read.csv("C:\\Users\\sagaa\\Downloads\\Class_Data_S23.csv")
table(data$Gender, data$Intro_Extra)
View(data)
data %>% filter(Class_Standing == "Junior") %>% summarise(total = n()) %>% pull(total)
data %>% filter(Class_Standing == "Junior")
library("tidyverse")
data %>% filter(Class_Standing == "Junior")
data %>% filter(Class_Standing == "Junior") %>% summarise(total = n()) %>% pull(total)
ncol(data)
names(data)
mean(data$GPA)
data %>% filter(Class_Standing == "Sophomore", Gender == "Female") %>% summairse(total = n()) %>% pull(total)
data %>% filter(Class_Standing == "Sophomore", Gender == "Female") %>% summarise(total = n()) %>% pull(total)
sd(data$GPA)
IQR(data$GPA)
library("tidyverse")
library("openintro")
library("statsr")
library("broom")
data("hfi")
View(data)
freedomData <- force("hfi")
freedomData <- force(data("hfi"))
freedomData <- force(data("hfi"))
freedomData <- data("hfi")
freedomData <- force(hfi)
freedomData <- force(hfi)
names(freedomData)
filteredData <- freedomData %>% select(cols) %>% filter(year == "2016")
cols = c("year", "countries", "region", "pf_expression_control", "hf_score", "pf_score")
filteredData <- freedomData %>% select(cols) %>% filter(year == "2016")
filteredData <- freedomData %>% select(all_of(cols)) %>% filter(year == "2016")
View(filteredData)
ggplot(filteredData, aes(x = pf_expression_control), y = pf_score, ymin = 0) + geom_point() + geom_smooth()
ggplot(filteredData, aes(x = pf_expression_control, y = pf_score, ymin = 0)) + geom_point() + geom_smooth()
r <- filteredData %>% summarise(r = cor(pf_expression_control, pf_score))
View(r)
r <- filteredData %>% summarise(r = cor(pf_expression_control, pf_score)) %>% pull(r)
plot_ss(x = pf_expression_control, y = pf_score, data = filteredData)
plot_ss(x = pf_expression_control, y = pf_score, data = filteredData)
plot_ss(x = pf_expression_control, y = pf_score, data = filteredData)
plot_ss(x = pf_expression_control, y = pf_score, data = filteredData)
model <- lm(pf_score ~ pf_expresision_control, data = filteredData)
model <- lm(pf_score ~ pf_expression_control, data = filteredData)
View(model)
model
View(model)
summary(model)
library(tidyverse)
library(openintro)
library(statsr)
library(broom)
data(hfi)
library(tidyverse)
library(openintro)
library(statsr)
library(broom)
data(hfi)
dim(hfi)
# list of columns we want to include in our data set
columns <- c(
"year",
"countries",
"region",
"pf_expression_control",
"hf_score",
"pf_score"
)
hfi_2016 <- hfi %>%
# selecting observations from 2016
filter(year == "2016") %>%
# removing all columns not listed above
select(all_of(columns))
# fit a model and give it a name
model <- lm(pf_score ~ pf_expression_control, data = hfi_2016)
glance(model)
ggplot(data = hfi_2016) +
aes(x = pf_expression_control, y = pf_score) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
xlab("Political Pressures and Controls on Media Content") +
ylab("Personal Freedom (score)")
model.aug <- augment(model)
ggplot(data = model.aug) +
aes(x = .fitted, y = .resid) +
geom_point() +
geom_hline(yintercept = 0, color = "blue") +
ggtitle("Residuals vs. Fitted") +
xlab("Fitted Values") +
ylab("Residuals")
ggplot(data = model.aug) +
aes(x = .resid) +
geom_histogram(binwidth = 0.25) +
ggtitle("Frequency of Residuals") +
xlab("Residuals")
ggplot(data = model.aug) +
aes(x = .resid) +
geom_boxplot()
model.aug <- augment(model)
ggplot(data = model.aug) +
aes(x = .fitted, y = .resid) +
geom_histogram() +
geom_hline(yintercept = 0, color = "blue") +
geom_smooth()
model.aug <- augment(model)
ggplot(data = model.aug) +
aes(x = .fitted, y = .resid) +
geom_point()
geom_hline(yintercept = 0, color = "blue") +
geom_smooth()
model.aug <- augment(model)
ggplot(data = model.aug) +
aes(x = .fitted, y = .resid) +
geom_point()
#geom_hline(yintercept = 0, color = "blue") +
geom_smooth()
ggtitle("Residuals vs. Fitted") +
xlab("Fitted Values") +
ylab("Residuals")
model.aug <- augment(model)
ggplot(data = model.aug) +
aes(x = .fitted, y = .resid) +
geom_point()
#geom_hline(yintercept = 0, color = "blue") +
geom_smooth() +
ggtitle("Residuals vs. Fitted") +
xlab("Fitted Values") +
ylab("Residuals")
model.aug <- augment(model)
ggplot(data = model.aug) +
aes(x = .fitted, y = .resid) +
geom_point() +
#geom_hline(yintercept = 0, color = "blue") +
geom_smooth() +
ggtitle("Residuals vs. Fitted") +
xlab("Fitted Values") +
ylab("Residuals")
sfo_feb_flights <- nycflights %>% filter(dest == "SFO", month == 2)
sfo_feb_flights <- nycflights %>% filter(dest == "SFO", month == 2) %>% summarise(total = n())
View(sfo_feb_flights)
View(hfi_2016)
flights <- force(nycflights)
View(flights)
median_arr_delay_per_month <- flights %>% group_by(month) summarise(mediam = median(arr_delay))
median_arr_delay_per_month <- flights %>% group_by(month) summarise(mediam = median(arr_delay))
median_arr_delay_per_month <- flights %>% group_by(month) %>% summarise(mediam = median(arr_delay))
View(median_arr_delay_per_month)
median_arr_delay_per_month <- flights %>% group_by(carrier) %>% summarise(mediam = median(arr_delay))
View(median_arr_delay_per_month)
fastest_carrier <- flights %>% group_by(carrier) %>% summarise(avg_speed = distance/(air_time/60))
View(fastest_carrier)
View(fastest_carrier)
fastest_carrier <- flights %>% group_by(carrier) %>% summarise(avg_speed = distance/(air_time/60)) %>% group_by(carrier) %>% summarise(speed = mean(avg_speed))
View(fastest_carrier)
fastest_carrier <- flights %>% group_by(carrier) %>% summarise(avg_speed = mean(distance/(air_time/60)))
View(fastest_carrier)
sfo_feb_flights <- nycflights %>% filter(dest == "SFO", month == 2) %>% summarise(total = n())
View(sfo_feb_flights)
median_arr_delay_per_month <- flights %>% group_by(carrier) %>% summarise(median = median(arr_delay))
View(median_arr_delay_per_month)
median_arr_delay_per_month <- flights %>% group_by(month) %>% summarise(median = median(arr_delay))
median_arr_delay_per_month <- flights %>% group_by(carrier) %>% summarise(median = median(arr_delay))
fastest_carrier <- flights %>% group_by(carrier) %>% summarise(avg_speed = mean(distance/(air_time/60)))
View(fastest_carrier)
fastest_carrier <- flights %>% group_by(carrier) %>% summarise(avg_speed = median(distance/(air_time/60)))
View(flights)
View(median_arr_delay_per_month)
fastest_carrier <- flights %>% group_by(carrier) %>% summarise(avg_speed = median(distance/(air_time/60)))
View(fastest_carrier)
median_arr_delay_per_month <- flights %>% group_by(carrier) %>% summarise(median = mean(arr_delay))
ggplot(data = flights, aes(x = arr_delays)) %>% geom_point()
ggplot(data = flights, aes(x = arr_delays)) + geom_point()
ggplot(data = flights, aes(x = arr_delay)) + geom_point()
plot(flights$arr_delay)
histogram(flights$arr_delay)
ggplot(data = flights, aes(x = arr_delay, y = frequency(arr_delay))) + geom_histogram()
ggplot(data = flights, aes(x = arr_delay)) + geom_histogram()
data <- read.csv("Yan_LM.csv")
data <- read.csv("./Yan_LM.csv")
data <- read.csv("Yan_LM.csv")
data <- read.csv("class/Yan_LM.csv")
View(data)
ggplot(data, aes(x = Love, y = MoneySpent)) + geom_point()
library("tidyverse")
ggplot(data, aes(x = Love, y = MoneySpent)) + geom_point()
model <- lm(MoneySpent ~ Love, data = data)
list
view(list)
model
tidy(model)
glance(model)
library("openintro")
glance(model)
library(tidyverse)
library(openintro)
library(statsr)
library(broom)
data(hfi)
glance(model)
tidy(model)
residuals <- residuals(model)
boxplot(residuals)
plot(residuals)
pnorm(1.28, 0, 1)
pnorm(-1.96, 0, 1)
pnorm(1,0,1)
3/5
pnorm(0.6, 0, 1)
pnorm(35.8, 36, 0.11)
0.2/0.11
pnorm(1.818182, 0, 1)
pnorm(-1.818182, 0, 1)
0.2/0.11
pnorm(1.82)
pnomr(1.82)-pnorm(-1.82)
pnorm(1.82)-pnorm(-1.82)
qnorm(0.03, 98.2, 0.73)
-1.88*0.73+98.2
pnorm(-1.885)
1.29*0.73+98.2
qnorm(0.9,98.2,0.73)
pnorm(105, 125, 12)
pnorm(105, 120, 12)
1 - pnorm(125, 120, 12)
pnorm(125,120,12)-pnorm(110,120,12)
pnorm(140,120,12)-pnorm(110,120,12)
model <- lm(MoneySpent ~ Love, data = data)
glance(model)
sqrt(0.999)
mode.r.squared
model.r.squared
View(model)
model$coefficients
model$qr
glance(model)
model$coefficients
plot(residuals)
boxplot(residuals)
library("tidyverse")
ggplot(data, aes(x = Love, y = MoneySpent)) + geom_point()
cor(data$Love, data$MoneySpent)
0.9993063^2
tidy(model)
augment(model)
boxplot(residuals)
plot(model$residuals ~ model$fitted.values)
model.aug <- augment(model)
ggplot(data = model.aug) +
aes(x = .fitted, y = .resid) +
geom_point() +
geom_hline(yintercept = 0, color = "blue") +
geom_smooth() +
ggtitle("Residuals vs. Fitted") +
xlab("Fitted Values") +
ylab("Residuals")
model.aug <- augment(model)
ggplot(data = model.aug) +
aes(x = .fitted, y = .resid) +
geom_point() +
geom_hline(yintercept = 0, color = "blue") +
geom_smooth() +
ggtitle("Residuals vs. Fitted") +
xlab("Fitted Values") +
ylab("Residuals")
library("tidyverse")
library("openintro")
head(fastfood)
fastfood <- head(fastfood)
View(fastfood)
fastfood <- force(fastfood)
ggplot(dq, aes(x = cal_fat)) + geom_histogram()
mcdonalds <- fastfood %>% filter(restaurant == "Mcdonalds")
dq <- fastfood %>% filter(restaurant == "Dairy Queen")
ggplot(dq, aes(x = cal_fat)) + geom_histogram()
View(fastfood)
fastfood <- force(fastfood)
mcdonalds <- fastfood %>% filter(restaurant == "Mcdonalds")
dq <- fastfood %>% filter(restaurant == "Dairy Queen")
ggplot(dq, aes(x = cal_fat)) + geom_histogram()
ggplot(mcdonalds, aes(x = cal_fat)) + geom_histogram()
ggplot(dq, aes(x = cal_fat)) + geom_histogram()
ggplot(mcdonalds, aes(x = cal_fat)) + geom_boxplot()
ggplot(mcdonalds, aes(x = cal_fat)) + geom_histogram()
ggplot(mcdonalds, aes(x = cal_fat)) + geom_histogram() + geom_smooth()
ggplot(mcdonalds, aes(x = cal_fat)) + geom_histogram()
ggplot(mcdonalds, aes(x = cal_fat)) + geom_line(state = "qq")
ggplot(mcdonalds, aes(x = cal_fat)) + geom_line(stat = "qq")
ggplot(mcdonalds, aes(sample = cal_fat)) + geom_line(stat = "qq")
ggplot(dq, aes(sample = cal_fat)) + geom_line(stat = "qq")
qqnorm(mcdonalds$cal_fat); qqline(mcdonalds$cal_fat)
qqnormsim(sample = cal_fat, data = mcdonalds)
1 - pnorm(1200, 1087, 98)
pnorm(37.6, 39.8, 2.2)
1 - porm(44.2, 39.8, 2.2)
1 - pnorm(44.2, 39.8, 2.2)
pnorm(44.2,39.8,2.2) - pnorm(35.4,39.8,2.2)
qnorm(0.75, 39.8, 2.2)
qnorm(0.01, 39.8, 2.2)
# p(x < 80)
pnorm(80, 72.6, 4.78)
#
pnorm(80, 72.6, 4.78) - pnorm(60, 72.6, 4.78)
qnorm(0.95, 72.6, 4.78)
1 - pnorm(70, 72.6, 4.78)
27/212
